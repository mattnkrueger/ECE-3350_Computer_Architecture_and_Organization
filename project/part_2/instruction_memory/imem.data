// ECE:3350 sisc processor project

// --------------------------- Formats --------------------------- //
// 32b instr:
//     ------------------------------------------------------------
//     | 31-28 | 27-24 | 23-20 | 19-16 | 15-12 | 11-8 | 7-4 | 3-0 |
//     ------------------------------------------------------------
//
// a. immediate operand:
//     | opcode | funct | rdst | rsrc  | ------- immediate ------ |
//
// b. register operand:
//     | opcode | funct | rdst | rsrc1 | rsrc2 | ---- unused ---- |
// 
// c. branch - BNE (branch not equal) ABSOLUTE
//     | opcode | flag  | ---------- absolute address ----------- |
// 
// d. branch - BRR (branch if register equal contents equal to zero) RELATIVE
//     | opcode | flag  | ------ relative offset (signed) ------- | 
// 
// e. branch - BNR (branch if register contents not equal to zero) RELATIVE
//     | opcode | flag  | ------ relative offset (signed) ------- | 
//
// h. halt
//     F0000000


//                                                                      // FORMAT
00000000 //00: NOP                                                      // N/A
21100001 //01: ADI  R1,R0,1      R1 <- R0 + (0x0000)0001                // a 
11211000 //02: ADD  R2,R1,R1     R2 <- R1 + R1                          // b 
1B322000 //03: SHL  R3,R2,R2     R3 <- R2 << [R2]                       // b
12412000 //04: SUB  R4,R1,R2     R4 <- R1 - R2                          // b
1A443000 //05: SHR  R4,R4,R3     R4 <- R4 >> [R3]                       // b
17234000 //06: XOR  R2,R3,R4     R2 <- R3 ^ R4                          // b
14220000 //07: NOT  R2,R2        R2 <- ~R2                              // b
19421000 //08: ROL  R4,R2,R1     R4 <- R2 <.< [R1]                      // b
15524000 //09: OR   R5,R2,R4     R5 <- R2 | R4                          // b
16324000 //0A: AND  R3,R2,R4     R3 <- R2 & R4                          // b
00000000 //0B: NOP                                                      // N/A

// At this point, registers should be as follows:
// R1: 00000001		R4: FE000011                                        
// R2: FF000008		R5: FF000019
// R3: FE000000		R0, R6-R15: 00000000                                // r0 bitbucket, r6-15 not implemented. also bitbucket

//                                                        STAT: CVNZ    
21100001 //0C: ADI  R1,R0,1      R1 <- R0 + (0x0000)0001 (STAT: 0000)   // a
12211000 //0D: SUB  R2,R1,R1     R2 <- R1 - R1           (STAT: 0001)   // b
12201000 //0E: SUB  R2,R0,R1     R2 <- R0 - R1           (STAT: 1010)   // b
18311000 //0F: ROR  R3,R1,R1     R3 <- R1 >> [R1]                       // b
11423000 //10: ADD  R4,R2,R3     R4 <- R2 + R3           (STAT: 1100)   // b
00000000 //11: NOP                                                      // N/A

// This program tests branch instructions with two nested loops
11400000 //12:     ADD  R4,R0,R0     R4 <- R0 + R0             Clear R4                      // b
6100001D //13:     BNE  #1,L3        PC <- 0x001D              If R4 != 0, branch to L3      // c
21100001 //14:     ADI  R1,R0,1      R1 <- R0 + 0x(0000)0001   Set R1 = 1                    // a
21200004 //15:     ADI  R2,R0,4      R2 <- R0 + 0x(0000)0004   Set R2 = 4                    // a
2122FFFF //16: L1: ADI  R2,R2,-1     R2 <- R2 - 1              Decrement R2                  // a
51000005 //17:     BRR  #1,L3        PC <- (PC+1) + 5          If R2 = 0, branch to L3       // d
21320000 //18:     ADI  R3,R2,0      R3 <- R2 + 0x(0000)0000   Set R3 = R2                   // a
21440001 //19: L2: ADI  R4,R4,1      R4 <- R4 + 0x(0000)0001   Increment R4                  // a
12331000 //1A:     SUB  R3,R3,R1     R3 <- R3 - R1             Decrement R3                  // b
7100FFFD //1B:     BNR  #1 L2        PC <- (PC+1) - 3          If R3 != 0, branch to L2      // e
60000016 //1C:     BNE  #0,L1        PC <- 0x0016 (uncond.)    Branch to L1                  // c
F0000000 //1D: L3: HALT                                        Halt program                  // h

// At this point, registers should be as follows:
//   R1: 00000001		R4: 00000006
//   R2: 00000000		R5: FF000019
//   R3: 00000000		R0, R6-R15: 00000000