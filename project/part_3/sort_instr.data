// BUBBLE SORT PROGRAM:
//
//                  Sort a list of N signed, 32-bit integers stored in main memory using the bubble sort
//                  algorithm. The number of integers in the list, N, will be stored in memory location 0, with
//                  the integers stored at addresses 1 through N. After execution of your program, the integers
//                  should be in ascending order (least integer stored at address 1, and greatest stored at address
//                  N). An example list is provided in sort_data.data.
//
// REGISTER USAGE:
// we have 7 registers used in this implementation of bubble sort. The algorithm works by comparing adjacent
// elements and swapping them if they are in the wrong order, "bubbling up" larger elements to the end.  
// Yeah, this is one of the worst sorting algos, (besides random sort) but is very simple: 
// 
// we compare the beginning element in the array arr[i] with the following elements in the array arr[j..n] (at max).
// If i > j, swap and continue only no more swaps for that index.
// Then continue with i+1. This repeats until array is sorted
//
//                                                  [5, 2, 4, 1, 3]
//                                                   ^  ^
//                                                   i  j ------> n
//                                                  /    \
//                                        outer loop     inner loop
//
//
//                  R1 - outer loop counter (i): tracks the number of passes through the array
//                  R2 - inner loop counter (j): tracks current comparison position
//                  R3 - current element: holds arr[j]
//                  R4 - next element: holds arr[j+1]
//                  R5 - array size (n):  constant holding array length
//                  R6 - temporary for swapping: used during element exchanges
//                  R7 - array base address: points to current position in memory
//
// EXAMPLE CALCULATION: Sorting array [5,2,4,1,3] with n=5
// Initial state: memory[1:5] = [5,2,4,1,3]
//
// Pass 1 (i=0):
//   j=0: compare arr[0]= 5 > arr[1]=2  --> SWAP    --> [2,5,4,1,3]
//   j=1: compare arr[1]= 5 > arr[2]=4  --> SWAP    --> [2,4,5,1,3]
//   j=2: compare arr[2]= 5 > arr[3]=1  --> SWAP    --> [2,4,1,5,3]
//   j=3: compare arr[3]= 5 > arr[4]=3  --> SWAP    --> [2,4,1,3,5]
// Pass 2 (i=1): 
//   j=0: compare arr[0]= 2 > arr[1]=4  --> NO SWAP --> [2,4,1,3,5]
//   j=1: compare arr[1]= 4 > arr[2]=1  --> SWAP    --> [2,1,4,3,5]
//   j=2: compare arr[2]= 4 > arr[3]=3  --> SWAP    --> [2,1,3,4,5]
//   j=3: compare arr[3]= 4 > arr[4]=5  --> NO SWAP --> [2,1,3,4,5]
// Pass 3 (i=2): 
//   j=0: compare arr[0]= 2 > arr[1]=1  --> SWAP    --> [1,2,3,4,5]
//   j=1: compare arr[1]= 2 > arr[2]=3  --> NO SWAP --> [1,2,3,4,5]
//   j=2: compare arr[2]= 3 > arr[3]=4  --> NO SWAP --> [1,2,3,4,5]
//   j=3: compare arr[3]= 4 > arr[4]=5  --> NO SWAP --> [1,2,3,4,5]
// Pass 4 (i=3): 
//   j=0: compare arr[0]= 1 > arr[1]=2  --> NO SWAP --> [1,2,3,4,5]
//   j=1: compare arr[1]= 2 > arr[2]=3  --> NO SWAP --> [1,2,3,4,5]
//   j=2: compare arr[2]= 3 > arr[3]=4  --> NO SWAP --> [1,2,3,4,5]
//   j=3: compare arr[3]= 4 > arr[4]=5  --> NO SWAP --> [1,2,3,4,5] DONE
// Final result: [1,2,3,4,5]

// PROGRAM -
// note, i have commented out the address labels for subroutines called as the SISC decoder will not understand these (they are characters and will mess up the program instructions)

// INITIALIZE
A0500000   // 00: LDA R5, [0]         ; R5 = N (assuming that address 0 stores 5)
21110000   // 01: ADI R1, R0, #0      ; i = 0
21170001   // 02: ADI R7, R0, #1      ; R7 = base address = 1

// OUTER_LOOP:
12220005   // 03: SUB R2, R5, R1      ; R2 = N - i
2122FFFF   // 04: ADI R2, R2, #-1     ; R2 -= 1
21170001   // 05: ADI R7, R0, #1      ; R7 = reset pointer to base

// INNER_LOOP:
12200002   // 06: SUB R0, R2, R0      ; R0 = R2
5100000A   // 07: BRR Z, OUTER_INC    ; if R2 == 0, done with inner loop

A8370000   // 08: LDX R3, R7, #0      ; R3 = arr[j]
A8470001   // 09: LDX R4, R7, #1      ; R4 = arr[j+1]
14300004   // 0A: SUB R0, R3, R4      ; compare R3 - R4
51000004   // 0B: BRR Z, NO_SWAP      ; if R3 â‰¤ R4, skip swap

11360000   // 0C: ADD R6, R3, R0      ; R6 = R3
11430000   // 0D: ADD R3, R4, R0      ; R3 = R4
11440000   // 0E: ADD R4, R6, R0      ; R4 = R6

C0370000   // 0F: STX R3, R7, #0      ; store arr[j]
C0470001   // 10: STX R4, R7, #1      ; store arr[j+1]

// NO_SWAP:
2122FFFF   // 11: ADI R2, R2, #-1     ; j--
21770001   // 12: ADI R7, R7, #1      ; R7++
5100FFF1   // 13: BRR Z, INNER_LOOP   ; loop back

// OUTER_INC:
21110001   // 14: ADI R1, R1, #1      ; i++
12400005   // 15: SUB R0, R1, R5      ; check i - N
5100FFEB   // 16: BRR Z, OUTER_LOOP   ; if i < N, loop again

// DONE:
F0000000   // 17: HLT