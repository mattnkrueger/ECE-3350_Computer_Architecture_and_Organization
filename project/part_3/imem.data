// ECE:3350 sisc processor project
// This program tests arithmetic instructions from Part 1.

// --------------------------- Formats --------------------------- //
// 32b instr:
//     ------------------------------------------------------------
//     | 31-28 | 27-24 | 23-20 | 19-16 | 15-12 | 11-8 | 7-4 | 3-0 |
//     ------------------------------------------------------------
//
// a. immediate operand:
//     | opcode | funct | rdst | rsrc  | ------- immediate ------ |
//
// b. register operand:
//     | opcode | funct | rdst | rsrc1 | rsrc2 | ---- unused ---- |
// 
// c. branch - BNE (branch not equal) ABSOLUTE
//     | opcode | flag  | ---------- absolute address ----------- |
// 
// d. branch - BRR (branch if register equal contents equal to zero) RELATIVE
//     | opcode | flag  | ------ relative offset (signed) ------- | 
// 
// e. branch - BNR (branch if register contents not equal to zero) RELATIVE
//     | opcode | flag  | ------ relative offset (signed) ------- | 
//
// h. halt
//     F0000000

00000000 //00: NOP
21100001 //01: ADI  R1,R0,#1     R1 <- R0 + (0x0000)0001
11211000 //02: ADD  R2,R1,R1     R2 <- R1 + R1
1B322000 //03: SHL  R3,R2,R2     R3 <- R2 << [R2]
12412000 //04: SUB  R4,R1,R2     R4 <- R1 - R2
1A443000 //05: SHR  R4,R4,R3     R4 <- R4 >> [R3]
17234000 //06: XOR  R2,R3,R4     R2 <- R3 ^ R4
14220000 //07: NOT  R2,R2        R2 <- ~R2
19421000 //08: RTL  R4,R2,R1     R4 <- R2 <.< [R1]
15524000 //09: OR   R5,R2,R4     R5 <- R2 | R4
16324000 //0A: AND  R3,R2,R4     R3 <- R2 & R4
00000000 //0B: NOP

// At this point, registers should be as follows:
// R1: 00000001		R4: FE000011
// R2: FF000008		R5: FF000019
// R3: FE000000		R0, R6-R15: 00000000

21100001 //0C: ADI  R1,R0,#1     R1 <- R0 + (0x0000)0001 (STAT: 0000)
12211000 //0D: SUB  R2,R1,R1     R2 <- R1 - R1           (STAT: 0001)
12201000 //0E: SUB  R2,R0,R1     R2 <- R0 - R1           (STAT: 1010)
18311000 //0F: RTR  R3,R1,R1     R3 <- R1 >> [R1]
11423000 //10: ADD  R4,R2,R3     R4 <- R2 + R3           (STAT: 1100)
00000000 //11: NOP

// At this point, registers should be as follows:
//   R1: 00000001		R4: 7FFFFFFF
//   R2: FFFFFFFF		R5: FF000019
//   R3: 80000000		R0, R6-R15: 00000000

// ECE:3350 sisc processor project part 2
// This section tests branch instructions with two nested loops

11400000 //12:     ADD  R4,R0,R0     R4 <- R0 + R1             Clear R4
4200001D //13:     BRA  N,L3         PC <- 0x001D              If R4 < 0, branch to L3
21100001 //14:     ADI  R1,R0,#1     R1 <- R0 + 0x(0000)0001   Set R1 = 1
21200004 //15:     ADI  R2,R0,#4     R2 <- R0 + 0x(0000)0004   Set R2 = 4
2122FFFF //16: L1: ADI  R2,R2,#-1    R2 <- R2 - 1              Decrement R2
51000005 //17:     BRR  Z,L3         PC <- (PC+1) + 5          If R2 != 0, branch to L3
21320000 //18:     ADI  R3,R2,0      R3 <- R2 + 0x(0000)0000   Set R3 = R2
21440001 //19: L2: ADI  R4,R4,1      R4 <- R4 + 0x(0000)0001   Increment R4
12331000 //1A:     SUB  R3,R3,R1     R3 <- R3 - R1             Decrement R3
7100FFFD //1B:     BNR  Z,L2         PC <- (PC+1) - 3          If R3 != 0, branch to L2
60000016 //1C:     BNE  #0,L1        PC <- 0x0016 (uncond.)    Branch to L1
00000000 //1D: L3: NOP                                         
 
// At this point, registers should be as follows:
//   R1: 00000001		R4: 00000006
//   R2: 00000000		R5: FF000019
//   R3: 00000000		R0, R6-R15: 00000000

// ECE:3350 sisc processor project part 3
// This section tests the load and store instructions
// 

21100001 //1E:     ADI  R1,R0,#1     R1 <- R0 + 0x(0000)0001             Set R1 = 1
21200004 //1F:     ADI  R2,R0,#4     R2 <- R0 + 0x(0000)0004             Set R2 = 4
B0400008 //20:     STA  R4,#0008     M(0008) <- R4                       LOC 0008 = 00000006
B8510008 //21:     STX  R5,R1,#0008  M(R1+0008) <- R5                    LOC 0009 = FF000019
A0200009 //22:     LDA  R2,#0009     R2 <- M(0009)                       R2 = FF000019
2130FFF8 //23:     ADI  R3,R0,#-8    R3 <- R0 + 0x(FFFF)FFF8             Set R3 = -8
A8330010 //24:     LDX  R3,R3,#16    R3 <- M(R3+0010)                    R3 = 00000006
F0000000 //25:     HLT                                                   

// At this point, registers should be as follows:
//   R1: 00000001		R4: 00000006
//   R2: FF000019		R5: FF000019
//   R3: 00000006		R0, R6-R15: 00000000
//   M[8]: 00000006		M[9]: FF000019
//
//